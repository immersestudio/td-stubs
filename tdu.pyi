import typing as _T

class Matrix:
	vals: _T.List[float]
	rows: _T.List[_T.List[float]]
	cols: _T.List[_T.List[float]]

	def __init__(self, *values): ...

	def transpose(self): ...
	def invert(self): ...
	def determinant(self) -> float: ...
	def copy(self) -> 'Matrix': ...
	def identity(self): ...
	def translate(self, tx, ty, tz, fromRight=False): ...
	def rotate(self, rx, ry, rz, fromRight=False, pivot=None): ...
	def rotateOnAxis(self, rotationAxis, angle, fromRight=False, pivot=None): ...
	def scale(self, sx, sy, sz, fromRight=False, pivot=None): ...
	def lookat(self, eyePos, target, up): ...
	def decompose(self) -> _T.Tuple[_T.Tuple]: ...

class Position:
	x: int
	y: int
	z: int

	def __init__(self, *vals): ...

	def translate(self, x, y, z): ...

	def scale(self, x, y, z): ...

	def copy(self) -> 'Position': ...

	def __getitem__(self, item: int) -> float: ...
	def __setitem__(self, key, value): ...
	def __mul__(self, other: _T.Union[float, Matrix]) -> _T.Union[float, 'Position']: ...
	def __add__(self, other: _T.Union[float, 'Position', 'Vector']) -> _T.Union[float, 'Position']: ...
	def __sub__(self, other: _T.Union[float, 'Position', 'Vector']) -> _T.Union[float, 'Position']: ...
	def __div__(self, other: float) -> 'Position': ...
	def __abs__(self) -> 'Position': ...
	def __neg__(self) -> 'Position': ...


class Vector:
	x: float
	y: float
	z: float

	def __init__(self, *vals): ...

	def translate(self, x, y, z): ...
	def scale(self, x, y, z): ...
	def __getitem__(self, item: int) -> float: ...
	def __setitem__(self, key, value): ...
	def normalize(self): ...
	def length(self) -> float: ...
	def lengthSquared(self) -> float: ...
	def copy(self) -> 'Vector': ...
	def distance(self, vec: 'Vector') -> float: ...
	def lerp(self, vec: 'Vector', t: float) -> 'Vector': ...
	def slerp(self, vec: 'Vector', t: float) -> 'Vector': ...
	def project(self, vec1: 'Vector', vec2: 'Vector'): ...
	def reflect(self, vec: 'Vector'): ...

_OperableWithQuaternion = _T.Union['Quaternion', _T.Tuple[float, float, float, float], Matrix]

class Quaternion:
	x: float
	y: float
	z: float
	w: float

	def lerp(self, q2: _OperableWithQuaternion, factor: float) -> 'Quaternion': ...
	def length(self) -> float: ...
	def cross(self, q2: _OperableWithQuaternion) -> 'Vector': ...
	def rotate(self, vec: 'Vector') -> 'Vector': ...
	def slerp(self, q2: _OperableWithQuaternion, factor: float) -> 'Quaternion': ...
	def eulerAngles(self, order='xyz') -> _T.Tuple[float, float, float]: ...
	def fromEuler(self, order='xyz') -> _T.Tuple[float, float, float]: ...
	def axis(self) -> 'Vector': ...
	def dot(self, q2: _OperableWithQuaternion) -> float: ...
	def exp(self) -> 'Quaternion': ...
	def copy(self) -> 'Quaternion': ...
	def log(self) -> 'Quaternion': ...
	def inverse(self) -> None: ...
	def angle(self) -> float: ...

	def __imul__(self, other: _OperableWithQuaternion) -> 'Quaternion': ...

_OperableWithColor = _T.Union['Color', _T.Tuple[float, float, float, float], _T.List[float], float]

class Color:
	r: float
	g: float
	b: float
	a: float

	def __init__(self, *vals): ...

	def __abs__(self) -> 'Color': ...
	def __add__(self, other: _OperableWithColor) -> 'Color': ...
	def __sub__(self, other: _OperableWithColor) -> 'Color': ...
	def __mul__(self, other: _OperableWithColor) -> 'Color': ...
	def __floordiv__(self, other: _OperableWithColor) -> 'Color': ...
	def __truediv__(self, other: _OperableWithColor) -> 'Color': ...
	def __iadd__(self, other: _OperableWithColor) -> 'Color': ...
	def __isub__(self, other: _OperableWithColor) -> 'Color': ...
	def __imul__(self, other: _OperableWithColor) -> 'Color': ...
	def __ifloordiv__(self, other: _OperableWithColor) -> 'Color': ...
	def __itruediv__(self, other: _OperableWithColor) -> 'Color': ...
	def __radd__(self, other: _OperableWithColor) -> 'Color': ...
	def __rsub__(self, other: _OperableWithColor) -> 'Color': ...
	def __rmul__(self, other: _OperableWithColor) -> 'Color': ...
	def __rfloordiv__(self, other: _OperableWithColor) -> 'Color': ...
	def __rtruediv__(self, other: _OperableWithColor) -> 'Color': ...
	def __len__(self): return 4
	def __getitem__(self, item) -> float: ...
	def __setitem__(self, key, value): ...
	def __iter__(self): ...

class ArcBall:
	def beginPan(self, u, v) -> None: ...
	def beginRotate(self, u, v) -> None: ...
	def beginDolly(self, u, v) -> None: ...
	def pan(self, u, v) -> None: ...
	def panTo(self, u, v, scale=1.0) -> None: ...
	def rotateTo(self, u, v, scale=1.0) -> None: ...
	def dolly(self, z) -> None: ...
	def dollyTo(self, u, v, scale=1.0) -> None: ...
	def transform(self) -> Matrix: ...
	def setTransform(self, matrix: Matrix) -> None: ...
	def identity(self) -> None: ...

class FileInfo(str):
	path: str
	ext: str  # includes "."
	baseName: str
	fileType: str
	absPath: str
	dir: str
	exists: bool
	isDir: bool
	isFile: bool

	def __init__(self, path: str = None): ...

class PathInfo(FileInfo):
	pass

class Dependency:
	def __init__(self, _=None):
		self.val = None

	def modified(self): pass

	callbacks: _T.List[_T.Callable[[dict], None]]
	ops: _T.List['AnyOpT']
	listAttributes: 'ListAttributesList'
